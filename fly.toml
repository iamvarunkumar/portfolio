# fly.toml app configuration file for YOUR_APP_NAME
# Generated by flyctl or based on standard Django deployment.
# See https://fly.io/docs/reference/configuration/ for information about how to use this file.

# Replace YOUR_APP_NAME with the unique name you chose for your app on Fly.io
app = "my_portfolio"

# Replace YOUR_PRIMARY_REGION with the region you selected during launch (e.g., maa, bom, sin, fra, iad)
primary_region = "bom"

# Specifies build strategy. If empty, Fly assumes a Dockerfile in the root.
[build]
  # If your Dockerfile isn't named 'Dockerfile' or isn't in the root, specify it here:
  dockerfile = "Dockerfile"

# Defines the command to run *before* a new deployment is released.
# Essential for running database migrations.
[deploy]
  release_command = "python manage.py migrate --noinput"

# Defines non-secret environment variables available to your application.
[env]
  # The internal port your application server (Gunicorn) should listen on.
  # This MUST match the port exposed/used in your Dockerfile's CMD line.
  PORT = "8000"
  # Note: Sensitive variables like SECRET_KEY, DATABASE_URL, ALLOWED_HOSTS
  # should be set using 'flyctl secrets set KEY=VALUE' instead of here.

# Defines the services, ports, and health checks for your application.
[[services]]
  # The protocol your service uses internally.
  protocol = "tcp"
  # The internal port your app listens on (must match [env] PORT and Dockerfile CMD).
  internal_port = 8000
  # The process group this service belongs to (default is "app").
  processes = ["app"]

  # Automatically redirect HTTP requests to HTTPS. Highly recommended.
  force_https = true

  # Configure Fly.io's auto start/stop behavior. Good for low-traffic sites.
  auto_stop_machines = true  # Stop VM when idle to save resources (may cause cold starts).
  auto_start_machines = true # Start VM automatically when traffic arrives.
  min_machines_running = 0   # Allows scaling down to zero (standard for free tier). Set to 1 for always-on.

  # Defines how Fly checks if your application is healthy.
  [[services.http_checks]]
    # Time between health checks.
    interval = "15s"
    # How long to wait for a response before timing out.
    timeout = "2s"
    # How long to wait after a VM starts before running the first health check.
    grace_period = "10s"
    # HTTP method to use for the check.
    method = "get"
    # The path to check (e.g., homepage or a dedicated health check endpoint).
    # Ensure this path returns a 2xx or 3xx status code when healthy.
    path = "/"
    # Protocol to use for the check (inside Fly's network).
    protocol = "http"
    # Set 'tls_skip_verify = true' only if using self-signed certs internally (rare).

  # Defines the external port mapping for HTTP traffic.
  [[services.ports]]
    # External port number.
    port = 80
    # How Fly handles requests on this port (plain HTTP).
    handlers = ["http"]

  # Defines the external port mapping for HTTPS traffic.
  [[services.ports]]
    # External port number.
    port = 443
    # How Fly handles requests: 'tls' terminates TLS, 'http' handles the HTTP request.
    handlers = ["tls", "http"]

# --- Optional Sections ---

# Define specific commands for process groups if not using Dockerfile CMD or need multiple processes.
# [processes]
#   app = "gunicorn portfolio_project.wsgi:application --bind 0.0.0.0:$PORT" # Example overriding CMD

# Mount persistent volumes if you need to store data (like user uploads/media files).
# [[mounts]]
#   source = "myapp_data" # Name of the volume (create with 'flyctl volumes create')
#   destination = "/app/media" # Path inside the container where the volume is mounted